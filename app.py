from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import asyncio


# ==============================
# CONFIGURA√á√ïES DO BOT
# ==============================

TOKEN = os.environ.get('BOT_TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')

# ==============================
# INICIALIZANDO O FLASK
# ==============================

app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return 'ü§ñ Bot de Arbitragem est√° rodando com sucesso!', 200


# ==============================
# FUN√á√ïES DO BOT
# ==============================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Bot de Arbitragem est√° online e operando!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ O bot est√° funcionando corretamente!")

async def buscar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç Buscando oportunidades de arbitragem (simulado)...")
    await asyncio.sleep(2)
    await update.message.reply_text("üí∞ Arbitragem encontrada! (exemplo)")


# ==============================
# FUN√á√ÉO PARA INICIAR O BOT
# ==============================

async def rodar_bot():
    app_bot = Application.builder().token(TOKEN).build()

    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("status", status))
    app_bot.add_handler(CommandHandler("buscar", buscar))

    print("üöÄ Bot iniciado com sucesso!")
    await app_bot.run_polling()


# ==============================
# INICIALIZA√á√ÉO GERAL
# ==============================

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(rodar_bot())

    port = int(os.environ.get('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)
